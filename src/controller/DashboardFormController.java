package controller;

import database.DBConnection;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import tablemodel.ToDoTM;

import java.io.IOException;
import java.sql.*;
import java.util.Observable;
import java.util.Optional;

public class DashboardFormController {
    public Label lblTitle;
    public Label lblId;
    public AnchorPane root;
    public Pane subRoot;
    public TextField txtDiscription;
    public ListView<ToDoTM> lstToDo;
    public TextField txtSelectedToDo;
    public Button btnUpdate;
    public Button btnDelete;

    public String selectedID = null;

    Connection connection = DBConnection.getInstance().getConnection();

    public void initialize() throws SQLException {
        lblTitle.setText("Hello " + LoginFormController.loginUserName + " Welcome to To-Do App");
        lblId.setText(LoginFormController.loginUserID);
        subRoot.setVisible(false);
        loadList();

        setDisableCommon(true);

        lstToDo.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<ToDoTM>() {
            @Override
            public void changed(ObservableValue<? extends ToDoTM> observable, ToDoTM oldValue, ToDoTM newValue) {

                ToDoTM selectedItem = lstToDo.getSelectionModel().getSelectedItem();

                if(selectedItem == null){
                    return;
                }
                setDisableCommon(false);
                subRoot.setVisible(false);

                txtSelectedToDo.setText(lstToDo.getSelectionModel().getSelectedItem().getDescription());
                selectedID = lstToDo.getSelectionModel().getSelectedItem().getId();
            }
        });
    }

    public void setDisableCommon(boolean isDissable){
        txtSelectedToDo.setDisable(isDissable);
        btnDelete.setDisable(isDissable);
        btnUpdate.setDisable(isDissable);
    }

    public void txtLogoutOnAction(ActionEvent actionEvent) throws IOException {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION,"Do You Want To Logout?", ButtonType.YES, ButtonType.NO);
        Optional<ButtonType> buttonType = alert.showAndWait();

        if (buttonType.get().equals(ButtonType.YES)){
            Parent parent = FXMLLoader.load(this.getClass().getResource("../view/LoginForm.fxml"));
            Scene scene = new Scene(parent);

            Stage stage = (Stage) root.getScene().getWindow();

            stage.setScene(scene);
            stage.setTitle("Login");
            stage.centerOnScreen();
        }

    }

    public void btnAddNewToDoOnAction(ActionEvent actionEvent) {
        subRoot.setVisible(true);
        txtDiscription.requestFocus();
        setDisableCommon(true);
        txtSelectedToDo.clear();
    }

    public void addToListOnAction(ActionEvent actionEvent) throws SQLException {
        String description = txtDiscription.getText();
        String user_id = lblId.getText();
        String id = autoGeneratedID();

        System.out.println("Generated ID: " + id);

        try (PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO todo (id, description, user_id) VALUES (?, ?, ?)")) {
            preparedStatement.setObject(1, id);
            preparedStatement.setObject(2, description);
            preparedStatement.setObject(3, user_id);

            int rowsAffected = preparedStatement.executeUpdate();
            System.out.println("Rows affected: " + rowsAffected);
        } catch (SQLException e) {
            e.printStackTrace();
        }

        txtDiscription.clear();
        subRoot.setVisible(false);
        loadList();
    }


    public String autoGeneratedID() throws SQLException {
        String id;
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT id FROM todo ORDER BY id DESC LIMIT 1");

        if (resultSet.next()) {
            String todoId = resultSet.getString(1).substring(1);
            int Intid = Integer.parseInt(todoId) + 1;

            if (Intid < 10) {
                id = "T00" + Intid;
            } else if (Intid < 100) {
                id = "T0" + Intid;
            } else {
                id = "T" + Intid;
            }
        } else {
            id = "T001";
        }

        resultSet.close();
        statement.close();

        return id;
    }

    public void loadList() throws SQLException {

        ObservableList<ToDoTM> items = lstToDo.getItems();
        items.clear();

        PreparedStatement preparedStatement = connection.prepareStatement("select * from todo where user_id = ?");
        preparedStatement.setObject(1, LoginFormController.loginUserID);

        ResultSet resultSet = preparedStatement.executeQuery();

        while (resultSet.next()){
            String id = resultSet.getString(1);
            String description = resultSet.getString(2);
            String user_id = resultSet.getString(3);

            items.add(new ToDoTM(id,description,user_id));
        }
        lstToDo.refresh();
    }

    public void btnUpdateOnAction(ActionEvent actionEvent) throws SQLException {
        String description = txtSelectedToDo.getText();

        Connection connection = DBConnection.getInstance().getConnection();

        PreparedStatement preparedStatement = connection.prepareStatement("update todo set description = ? where id = ?");
        preparedStatement.setObject(1,description);
        preparedStatement.setObject(2,selectedID);

        preparedStatement.executeUpdate();
        loadList();

        txtDiscription.clear();
        setDisableCommon(true);
    }

    public void btnDeleteOnAction(ActionEvent actionEvent) {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION,"Do You Want To Delete This To-Do?",ButtonType.YES,ButtonType.NO);
        Optional<ButtonType> buttonType = alert.showAndWait();

        if(buttonType.get().equals(ButtonType.YES)) {
            try {
                PreparedStatement preparedStatement = connection.prepareStatement("delete from todo where id = ?");
                preparedStatement.setObject(1, selectedID);

                preparedStatement.executeUpdate();
                loadList();

                txtSelectedToDo.clear();
                setDisableCommon(true);

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }
}

